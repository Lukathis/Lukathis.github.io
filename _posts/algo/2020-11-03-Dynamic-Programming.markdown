---
layout: post
title:  "Dynamic Programming 动态规划"
author: Xu Chi
toc: true
tags: [Tech, Algo, DP]
---

通过把原问题分解为相对简单的子问题来求解复杂问题的思想。

# 概念

## 最优子结构

## 重复子问题

## 状态转移方程

总结： 解决动态规划问题最难的地方有两点：

如何定义 f(n)f(n)
如何通过 f(1)f(1), f(2)f(2), … f(n - 1)f(n−1) 推导出 f(n)f(n)，即状态转移方程

思路:
* 递归
* 自顶向下（记忆化）
* 自底向上（迭代）

# 动态规划问题分类

线性，区间，树形，状态压缩

* 线形: 单串，双串，矩阵
* 区间 
* 树形
* 状态压缩

# 动态规划与分治及贪心算法

## 分治

这里存在有最优的子结构，即原数组的排序结果是在子数组排序的结果上组合出来的，但是不存在重复子问题。

## 贪心

> 关于最优子结构
> 
> 贪心：每一步的最优解一定包含上一步的最优解，上一步之前的最优解无需记录
> 
> 动态规划：全局最优解中一定包含某个局部最优解，但不一定包含上一步的局部最优解，因此需要记录之前的所有的局部最优解
> 
> 关于子问题最优解组合成原问题最优解的组合方式
> 
> 贪心：如果把所有的子问题看成一棵树的话，贪心从根出发，每次向下遍历最优子树即可，这里的最优是贪心意义上的最优。此时不需要知道一个节点的所有子树情况，于是构不成一棵完整的树
> 
> 动态规划：动态规划需要对每一个子树求最优解，直至下面的每一个叶子的值，最后得到一棵完整的树，在所有子树都得到最优解后，将他们组合成答案
> 
> 结果正确性
> 
> 贪心不能保证求得的最后解是最佳的，复杂度低
> 
> 动态规划本质是穷举法，可以保证结果是最佳的，复杂度高
> 
> 作者：力扣 (LeetCode)
> 链接：https://leetcode-cn.com/leetbook/read/dynamic-programming-1-plus/xcrktd/
> 来源：力扣（LeetCode）
> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


|	分治	| 动态规划	| 贪心 |
| --- | --- | --- |
| 适用类型	| 通用	| 优化	| 优化 |
| 子问题	| 每个都不同	| 有很多重复	| 只有一个 |
| 最优子结构	| 没有要求	| 必须满足	| 必须满足 |
| 子问题数	| 全部都要解	| 全部都要解	| 只解一个 |

# 典型问题

300.